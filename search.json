[{"path":"/authors.html","id":null,"dir":"","previous_headings":"","what":"Authors","title":"Authors and Citation","text":"First Last. Author, maintainer.","code":""},{"path":"/authors.html","id":"citation","dir":"","previous_headings":"","what":"Citation","title":"Authors and Citation","text":"Last F (2023). conditionR: Package (One Line, Title Case). R package version 0.0.0.9000.","code":"@Manual{,   title = {conditionR: What the Package Does (One Line, Title Case)},   author = {First Last},   year = {2023},   note = {R package version 0.0.0.9000}, }"},{"path":"/index.html","id":"conditionr","dir":"","previous_headings":"","what":"What the Package Does (One Line, Title Case)","title":"What the Package Does (One Line, Title Case)","text":"Gracefully dealing errors can hard, particularly shiny apps. many operations shiny application might take cause issue want recover fashion. Applying changes database, might want rollback something unexpected found. user supplies data different format expected might want indicate , rather session crash. Maybe ’re born found dealing different types issues shiny apps difficult, wrote package facilitate easier processing different types issues. {conditionR}, make shiny application stand head shoulders rest adding infrastructure condition error handling reactives observers. shiny reactive observer function can called specified condition handlers, restart procedures well default handlers apply reactive observer functions. {conditionR} also provides monkey patch shiny functions, don’t manually update calls functions. Just add top app server apply infrastructure existing calls shiny::reactive etc. ’re worth ","code":"conditionR::monkey_patch_shiny()"},{"path":"/index.html","id":"installation","dir":"","previous_headings":"","what":"Installation","title":"What the Package Does (One Line, Title Case)","text":"can install development version conditionR like :","code":"# install.package(\"remotes\") remotes::install_github(\"jamieRowen-mediacom/conditionR\")"},{"path":"/index.html","id":"example","dir":"","previous_headings":"","what":"Example","title":"What the Package Does (One Line, Title Case)","text":"basic example shows solve common problem:","code":"library(conditionR) ## basic example code  library(shiny) library(magrittr)  # a basic ui for triggering conditions ui = fluidPage(   shiny::actionButton(\"go\", \"GO Specific handler!\"),   shiny::actionButton(\"go2\", \"Go default handler!\"),   shiny::actionButton(\"go3\", \"Go default and specific handler!\"),   shiny::textOutput(\"out\") )  # a new condition signal type default_condition = condition_factory(\"default\")  # a function to raise a default condition signal throw_default = function() {   default_condition(\"default\") }  # a handler function for default condition handle_default = function(x) {   shiny::showModal(     shiny::modalDialog(\"Default Condition handled\")   ) }  # register this handler to apply to all reactives/observers handle_default %>%   as_handler(\"default\") %>%   register_shiny_condition_handler()  # an error handling function handle_error = function(x) {   shiny::showNotification(\"There was an error\")   skip() # with skip if an error is hit, restart execution by returning NULL instead of crashing }   # register the error handler to apply by deafult handle_error %>%   as_handler(\"error\") %>%   register_shiny_condition_handler()  # a function to generate functions and sometimes return an \"example condition\" signal rand = function() {   x = runif(1)   if (x < 0.5) {     print(\"should raise condition\")     example_condition(\"bad value example\")   }   x }  # a function which induces an error bad = function() {   stop(\"error\") }  server = function(input, output, session) {   monkey_patch_shiny() # apply condition handling and restarts to shiny reactives and observers   x = shiny::reactiveVal(0)    output$out = shiny::renderText(x())    # observeEvent will now take parameters for condition handlers   shiny::observeEvent(     input$go, {       print(\"go\")       val = rand()       x(val)       throw_default()     },     \"conditionr_example\" = function(x) { # handle the example condition signal       print(\"help!!!\")       shiny::showNotification(x$message, session = session)     },     use_default_shiny_handlers = FALSE # this observer should ignore the default handlers   )    # this observer will respect the default handlers, clicking the button will throw a default condition   shiny::observeEvent(     input$go2, {       print(\"go 2\")       val = rand()       x(val)       throw_default()     }    )      # an observer which respects both specific handlers and the registered defaults   shiny::observeEvent(     input$go3, {       print(\"go\")       val = rand()       x(val)       throw_default()     },     \"conditionr_example\" = function(x) {       print(\"help!!!\")       shiny::showNotification(x$message, session = session)     }   )    # the functions have a wh_[*] equivalent   # the monkey patch binds these definitions to the shiny functions   # for convenience   # this reactive will respect the default conditions (including the error handler)   # as well as the specific   r = wh_reactive({     shiny::invalidateLater(1000)     x = rand()     if (x > 0.8){       bad() # throw an error     }     x   }, \"conditionr_example\" = function(x) {     shiny::showNotification(paste0(\"reactive condition handler \", x$message), session = session)   })    shiny::observe({     x = r()     print(x)   })  }  shiny::shinyApp(ui, server)"},{"path":"/reference/as_handler.html","id":null,"dir":"Reference","previous_headings":"","what":"As Handler — as_handler","title":"As Handler — as_handler","text":"Cast function condtionr handler object","code":""},{"path":"/reference/as_handler.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"As Handler — as_handler","text":"","code":"as_handler(f, conditions)"},{"path":"/reference/as_handler.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"As Handler — as_handler","text":"f function condtionr handler object","code":""},{"path":"/reference/condition_factory.html","id":null,"dir":"Reference","previous_headings":"","what":"Create a function to be used to create new condition signals — condition_factory","title":"Create a function to be used to create new condition signals — condition_factory","text":"Creates function can used create new condition signals given type.","code":""},{"path":"/reference/condition_factory.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Create a function to be used to create new condition signals — condition_factory","text":"","code":"condition_factory(type)"},{"path":"/reference/condition_factory.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Create a function to be used to create new condition signals — condition_factory","text":"type character(n) condition signal type resultant function","code":""},{"path":"/reference/exprToQuo.html","id":null,"dir":"Reference","previous_headings":"","what":"expression to quosure — exprToQuo","title":"expression to quosure — exprToQuo","text":"almost verbatim copied implementation internal shiny function. Prevents us relying unexported function package.","code":""},{"path":"/reference/exprToQuo.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"expression to quosure — exprToQuo","text":"","code":"exprToQuo(expr, env = parent.frame(), quoted = FALSE)"},{"path":"/reference/quoToLabel.html","id":null,"dir":"Reference","previous_headings":"","what":"quosure to label — quoToLabel","title":"quosure to label — quoToLabel","text":"almost verbatim copied implementation internal shiny function. Prevents us relying unexported function package.","code":""},{"path":"/reference/quoToLabel.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"quosure to label — quoToLabel","text":"","code":"quoToLabel(q, functionLabel, label = NULL)"},{"path":"/reference/quoToLabelBody.html","id":null,"dir":"Reference","previous_headings":"","what":"quosure to label body — quoToLabelBody","title":"quosure to label body — quoToLabelBody","text":"almost verbatim copied implementation internal shiny function. Prevents us relying unexported function package.","code":""},{"path":"/reference/quoToLabelBody.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"quosure to label body — quoToLabelBody","text":"","code":"quoToLabelBody(q)"},{"path":"/reference/register_shiny_condition_handler.html","id":null,"dir":"Reference","previous_headings":"","what":"Register a condition hander into the set of defaults — register_shiny_condition_handler","title":"Register a condition hander into the set of defaults — register_shiny_condition_handler","text":"Register condition hander set defaults","code":""},{"path":"/reference/register_shiny_condition_handler.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Register a condition hander into the set of defaults — register_shiny_condition_handler","text":"","code":"register_shiny_condition_handler(f)"},{"path":"/reference/register_shiny_condition_handler.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Register a condition hander into the set of defaults — register_shiny_condition_handler","text":"f function class conditionr_handler","code":""},{"path":"/reference/wh_observeEvent.html","id":null,"dir":"Reference","previous_headings":"","what":"ObserveEvent with handlers — wh_observeEvent","title":"ObserveEvent with handlers — wh_observeEvent","text":"alternative implementation shiny::observeEvent() wraps handlerExpr condition handling.","code":""},{"path":"/reference/wh_observeEvent.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"ObserveEvent with handlers — wh_observeEvent","text":"","code":"wh_observeEvent(   eventExpr,   handlerExpr,   ...,   use_default_shiny_handlers = TRUE,   event.env = parent.frame(),   event.quoted = FALSE,   handler.env = parent.frame(),   handler.quoted = FALSE,   label = NULL,   suspended = FALSE,   priority = 0,   domain = shiny::getDefaultReactiveDomain(),   autoDestroy = TRUE,   ignoreNULL = TRUE,   ignoreInit = FALSE,   once = FALSE )"},{"path":"/reference/wh_observeEvent.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"ObserveEvent with handlers — wh_observeEvent","text":"eventExpr (quoted unquoted) expression represents event; can simple reactive value like input$click, call reactive expression like dataset(), even complex expression inside curly braces handlerExpr expression call whenever eventExpr invalidated. side-effect-producing action (return value ignored). executed within isolate() scope. ... arguments passed base::withCallingHandlers() use_default_shiny_handlers logical(1) TRUE, default, use registered default condition handlers addition specified handlers passed. See register_shiny_condition_handlers() event.env parent environment reactive expression. default, calling environment, defining ordinary non-reactive expression. eventExpr quosure event.quoted TRUE, event.env ignored. event.quoted TRUE, quote()ed value eventExpr used eventExpr evaluated. eventExpr quosure like use expression value eventExpr, must set event.quoted TRUE. handler.env parent environment reactive expression. default, calling environment, defining ordinary non-reactive expression. handlerExpr quosure handler.quoted TRUE, handler.env ignored. handler.quoted TRUE, quote()ed value handlerExpr used handlerExpr evaluated. handlerExpr quosure like use expression value handlerExpr, must set handler.quoted TRUE. label label observer reactive, useful debugging. suspended TRUE, start observer suspended state. FALSE (default), start non-suspended state. priority integer numeric controls priority observer executed. observer given priority level always execute sooner observers lower priority level. Positive, negative, zero values allowed. domain See domains. autoDestroy TRUE (default), observer automatically destroyed domain () ends. ignoreNULL Whether action triggered (value calculated, case eventReactive) input NULL. See Details. ignoreInit TRUE, , observeEvent first created/initialized, ignore handlerExpr (second argument), whether otherwise supposed run . default FALSE. See Details. Whether observeEvent immediately destroyed first time code handlerExpr run. pattern useful want subscribe event happen .","code":""},{"path":"/reference/with_class.html","id":null,"dir":"Reference","previous_headings":"","what":"With class — with_class","title":"With class — with_class","text":"convenience method attaching new classes given object","code":""},{"path":"/reference/with_class.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"With class — with_class","text":"","code":"with_class(x, cls)"},{"path":"/reference/with_class.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"With class — with_class","text":"x object cls character(n) classes attach x","code":""},{"path":"/reference/with_class.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"With class — with_class","text":"x additional classes","code":""}]
